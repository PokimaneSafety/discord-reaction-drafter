name: build
on:
    push:
        branches:
            - main
        paths:
            # Package
            - src/**
            # Workflow
            - .github/workflows/build.yaml
            # TypeScript
            - tsconfig*
              # Dependencies
            - package.json
            - yarn.lock
    pull_request:
        paths:
            # Package
            - src/**
            # Workflow
            - .github/workflows/build.yaml
            # TypeScript
            - tsconfig*
            # Dependencies
            - package.json
            - yarn.lock

jobs:
    build:
        runs-on: ubuntu-20.04
        steps:
            - name: Checkout Latest Commit
              uses: actions/checkout@v2

            - name: Restore Dependencies
              uses: actions/cache@v2
              id: dependency-cache
              with:
                  key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
                  path: node_modules

            - name: Install Dependencies
              if: steps.dependency-cache.outputs.cache-hit != 'true'
              run: yarn install

            - name: Run Typecheck
              run: yarn typecheck

            - name: Run Linter
              run: yarn lint

            - name: Run Tests
              run: yarn test

            - name: Build
              run: yarn build

            - name: Check Release Status
              id: release
              run: |
                  MESSAGE="${{ github.event.head_commit.message }}"
                  echo "::set-output name=tag::${MESSAGE}"
                  IS_RELEASE=`echo "${MESSAGE}" | grep -qP "^v\d+\.\d+\.\d+\S*$" && echo true || echo false`
                  echo "::set-output name=is_release::${IS_RELEASE}"

            - name: Restore Nexe Cache
              uses: actions/cache@v2
              if: steps.release.outputs.is_release == 'true'
              with:
                  key: ${{ runner.os }}-${{ hashFiles('scripts/build.sh') }}
                  path: $HOME/.nexe

            - name: Upload Binaries
              if: steps.release.outputs.is_release == 'true'
              run: |
                  set -x
                  assets=()
                  for asset in ./bin/*; do
                    assets+=("-a" "$asset")
                  done
                  TAG="${{ steps.release.outputs.tag }}"
                  hub release create "${assets[@]}" -m "$TAG" "$TAG"
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
